@model LoginViewModel

<style>
    .btn-xl {
        padding: 10px 20px;
        font-size: 20px;
        border-radius: 10px;
        width: 15%;
    }
</style>

@if (User.Identity.IsAuthenticated)
{
    <div id="chatroom" class="overflow-auto" style="height: 500px; width:300px;">

    </div>

    <br />
    <button id="butBro" type="button" class="btn btn-primary btn-xl">Bro!</button>
    <button id="butSis" type="button" class="btn btn-success btn-xl">Sis!</button>

    <br />
    <button  class="btn btn-outline-danger" onclick="location.href='@Url.Action("LogOff", "Account")'">Log off</button>
    <br />
}
else
{
    <h1> Auntification: </h1>
    <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl">
        @foreach (var provider in Model.ExternalProviders)
        {
            <button type="submit" name="provider" class="btn btn-outline-info" value="@provider.Name">
                @provider.DisplayName
            </button>
        }
    </form>
}

<div id="broClick" class="d-inline">0</div>
<div class="d-inline">Bro!</div>
<div id="sisClick" class="d-inline">0</div>
<div class="d-inline">Sis!</div>

<script>
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/chat")
        .build();


    hubConnection.on("Send", function (message) {

        let elem = document.createElement("p");
        elem.style.cssText  = "font-size: 16pt;";
        elem.appendChild(document.createTextNode(message));

        let firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);
    });

    hubConnection.on("Notify", function (message) {

        let elem = document.createElement("p");
        elem.style.cssText = 'font-size: 9pt; margin: 0; padding: 0; font-family: Verdana, Arial, Helvetica, sans-serif; class="font-weight-light;"';
        elem.appendChild(document.createTextNode(message));

        let firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);
    });

    hubConnection.on("Counter", function (broCounter, sisCounter) {

        var elem = document.getElementById('broClick');
        elem.innerHTML = broCounter;

        var elem1 = document.getElementById('sisClick');
        elem1.innerHTML = sisCounter;

    });




    const btns = document.querySelectorAll('button[id^=but]')
    btns.forEach(btn => {

        btn.addEventListener('click', event => {
            var message = $('#' + event.target.id).text();
            hubConnection.invoke("Send", message);
            hubConnection.invoke("Notify");

            var broClicks = Number($('#broClick').text());
            var sisClicks = Number($('#sisClick').text());
            hubConnection.invoke("Counter", event.target.id, broClicks, sisClicks);
            if (event.target.id == 'butBro')
                broClicks += 1;
            if (event.target.id == 'butSis')
                sisClicks += 1;
    
        });
    });


    hubConnection.start();
</script>
